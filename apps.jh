entity Campaign {
  id String
  campaignDetails TextBlob required
  campaignType String required
  startDate ZonedDateTime
  endDate ZonedDateTime
  createdBy String required
  createdDate ZonedDateTime required
}
entity CampaignFlow {
  id String
  campaignId String required
  templateFlowId String
  createdDate ZonedDateTime
  createdBy String
}
entity ConnectConfig {
  userId String required
  facebook TextBlob
  viber TextBlob
  createdDate ZonedDateTime
}
entity ConnectEvent {
  id String
  analyticId String required
  connectEvent TextBlob
  reference TextBlob
  createdDate ZonedDateTime
}
entity ConnectIntent {
  id String
  intentId String required
  flowId String
  connectChannel String required
  description String
  connectType String required
  messages TextBlob required
  reminder TextBlob
  createdDate ZonedDateTime required
  updatedDate ZonedDateTime
  createdBy String required
}
entity Recipient {
  id String
    campaignId String
    ref String
    connectDetails TextBlob required
    createdDate ZonedDateTime required
}
entity Redirect {
  id String
    campaignId String
    ref String
    url String
    postback String
    createdDate ZonedDateTime required
}
entity Reminder {
  id String
    recipientId String required
    campaignId String required
    intentId String required
    channel String required
    connectDetails TextBlob required
    done Boolean required
    executions Integer required
    createdDate ZonedDateTime required
    updatedDate ZonedDateTime
}
entity ConnectState {
  id String
  campaignId String required
  recipientId String required
  connectDetails TextBlob required
  channel String required
  intentId String
  intentType String
  connectEvent TextBlob
  createdDate ZonedDateTime required
  updatedDate ZonedDateTime
}
entity TemplateFlow {
  id String
    connectDetails TextBlob required
    userId String required
    createdBy String required
    createdDate ZonedDateTime
}
application {
  config {    
    packageName online.kehan.conect.gateway
    applicationType gateway
    baseName connectGateway
    serverPort 10000
    authenticationType oauth2
    cacheProvider redis
    enableHibernateCache true
    websocket false
    databaseType sql
    devDatabaseType postgresql
    prodDatabaseType postgresql
    searchEngine false
    messageBroker false
    serviceDiscoveryType eureka
    buildTool maven
    enableSwaggerCodegen false
    useSass true
    clientPackageManager npm
    clientFramework react
    testFrameworks []
    jhiPrefix jhi
    dtoSuffix DTO
    enableTranslation true
    nativeLanguage en
    languages [en, zh-cn, zh-tw]
  }
  entities Campaign, CampaignFlow, ConnectConfig, ConnectEvent, ConnectIntent, Recipient, Reminder, ConnectState, TemplateFlow
}
application {
  config {
    packageName online.kehan.connect.analytic.collection,      
    applicationType microservice,
    baseName analyticCollectionService,
    serverPort 8004,
    authenticationType oauth2,
    cacheProvider redis,
    enableHibernateCache true,
    websocket false,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    searchEngine false,
    messageBroker false,
    serviceDiscoveryType eureka,
    buildTool maven,
    enableSwaggerCodegen false,
    testFrameworks [],
    clientPackageManager npm,
    nativeLanguage en,
    languages [en, zh-cn, zh-tw],
    skipClient true,
    skipUserManagement true
  }
  entities ConnectEvent
}
application {
  config {
    packageName online.kehan.connect.analytic.query,      
    applicationType microservice,
    baseName analyticQueryService,
    serverPort 8005,
    authenticationType oauth2,
    cacheProvider redis,
    enableHibernateCache true,
    websocket false,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    searchEngine false,
    messageBroker false,
    serviceDiscoveryType eureka,
    buildTool maven,
    enableSwaggerCodegen false,
    testFrameworks [],
    clientPackageManager npm,
    nativeLanguage en,
    languages [en, zh-cn, zh-tw],
    skipClient true,
    skipUserManagement true
  }
  entities TemplateFlow, CampaignFlow, ConnectIntent, ConnectEvent, Campaign, Recipient
}
application {
  config {
    packageName online.kehan.connect.campaign,      
    applicationType microservice,
    baseName campaignService,
    serverPort 8005,
    authenticationType oauth2,
    cacheProvider redis,
    enableHibernateCache true,
    websocket false,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    searchEngine false,
    messageBroker false,
    serviceDiscoveryType eureka,
    buildTool maven,
    enableSwaggerCodegen false,
    testFrameworks [],
    clientPackageManager npm,
    nativeLanguage en,
    languages [en, zh-cn, zh-tw],
    skipClient true,
    skipUserManagement true
  }
  entities Campaign, Recipient
}
application {
  config {
    packageName online.kehan.connect.connector,      
    applicationType microservice,
    baseName connectorService,
    serverPort 8000,
    authenticationType oauth2,
    cacheProvider redis,
    enableHibernateCache true,
    websocket false,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    searchEngine false,
    messageBroker false,
    serviceDiscoveryType eureka,
    buildTool maven,
    enableSwaggerCodegen false,
    testFrameworks [],
    clientPackageManager npm,
    nativeLanguage en,
    languages [en, zh-cn, zh-tw],
    skipClient true,
    skipUserManagement true
  }
  entities ConnectState, ConnectConfig
}
application {
  config {
    packageName online.kehan.connect.flow,      
    applicationType microservice,
    baseName flowService,
    serverPort 8001,
    authenticationType oauth2,
    cacheProvider redis,
    enableHibernateCache true,
    websocket false,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    searchEngine false,
    messageBroker false,
    serviceDiscoveryType eureka,
    buildTool maven,
    enableSwaggerCodegen false,
    testFrameworks [],
    clientPackageManager npm,
    nativeLanguage en,
    languages [en, zh-cn, zh-tw],
    skipClient true,
    skipUserManagement true
  }
  entities CampaignFlow, ConnectIntent, TemplateFlow
}
application {
  config {
    packageName online.kehan.connect.reminder,      
    applicationType microservice,
    baseName reminderService,
    serverPort 8003,
    authenticationType oauth2,
    cacheProvider redis,
    enableHibernateCache true,
    websocket false,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    searchEngine false,
    messageBroker false,
    serviceDiscoveryType eureka,
    buildTool maven,
    enableSwaggerCodegen false,
    testFrameworks [],
    clientPackageManager npm,
    nativeLanguage en,
    languages [en, zh-cn, zh-tw],
    skipClient true,
    skipUserManagement true
  }
  entities Reminder
}
paginate * with infinite-scroll
paginate * with pagination
service * with serviceClass
microservice Campaign, CampaignFlow, ConnectConfig, ConnectEvent, ConnectIntent, Recipient, Reminder, ConnectState, TemplateFlow with connectGateway
microservice ConnectEvent with analyticCollectionService
microservice TemplateFlow, CampaignFlow, ConnectIntent, ConnectEvent, Campaign, Recipient with analyticQueryService
microservice Campaign, Recipient with campaignService
microservice ConnectState, ConnectConfig with connectorService
microservice CampaignFlow, ConnectIntent, TemplateFlow with flowService
microservice Reminder with reminderService

// will be created under 'docker-compose' folder
deployment {
  deploymentType docker-compose
  appsFolders [connectGateway, analyticCollectionService, analyticQueryService, campaignService, connectorService, flowService, reminderService]
  dockerRepositoryName "sandyway"
  consoleOptions [zipkin]
}
